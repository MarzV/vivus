297,302c297,306
<   this.setElement(element);
<   this.setOptions(options);
<   this.setCallback(callback);
< 
<   if (this.isReady) {
<     this.init();
---
>   // _init must be called as a callback function because:
>   // if Vivus needs to create an <object> the initialization 
>   // has to be done after the content has been loaded
>   var self = this;
>   this.options = options;
>   var _init = function(){
> 	self.setOptions(options);
> 	self.setCallback(callback);
> 	if (self.isReady) {
> 		self.init();
303a308,312
>   };
>   // in case of an <object> setElement returns false
>   // in case of any other element it returns true so the _init has to be called
>   if ( ! this.setElement(element, _init) ){
>   	_init();
305a315,319
> 
> }
> // is needed as Vivus.prototype.setOptions requires options.file
> Vivus.prototype.options = null;
> 
333c347,350
< Vivus.prototype.setElement = function (element) {
---
> Vivus.prototype.setElement = function (element, _callback) {
> // returns true if addEventListener is called (in case of <object>)
> // returns false in case of any other element
> 	var _return = false;
338a356,373
> 	var self = this;
> 	var addLoadListener = function( _cb ){ // _cb = callback
> 		// If we have to wait for it
> 		element.addEventListener('load', function (evt) {
> 			//self.el = evt.target.contentDocument.querySelector('svg');
> 			var target = evt.target.contentDocument;
> 			var svgElements = target.getElementsByTagName('svg');
> 			if ( 0 === svgElements.length ) {
> 				throw new Error('Vivus [constructor]: object loaded does not contain any SVG');
> 			}
> 			else {
> 				self.el = svgElements[0];
> 				self.isReady = true;
> 				_cb();
> 			}
> 		});
> 	};
> 
341a377
> /*
344a381
> */
349a387
>   
359,367d396
<       return;
<     }
< 
<     // If we have to wait for it
<     var self = this;
<     element.addEventListener('load', function () {
<       self.el = element.contentDocument.querySelector('svg');
<       if (!self.el) {
<         throw new Error('Vivus [constructor]: object loaded does not contain any SVG');
370,371c399,400
<         self.isReady = true;
<         self.init();
---
> 		_return = true;
> 		addLoadListener(_callback);
373d401
<     });
375d402
< 
377c404,415
<     throw new Error('Vivus [constructor]: "element" parameter must be a string or a SVGelement');
---
> 	if ( typeof this.options.file !== 'undefined' ){
> 		var objElm = document.createElement('object');
> 		objElm.setAttribute('type', 'image/svg+xml');
> 		objElm.setAttribute('data', this.options.file);
> 		element.appendChild(objElm);
> 		element = objElm;
> 		_return = true;
> 		addLoadListener(_callback);
> 	}
> 	else {
> 		throw new Error('Vivus [constructor]: To add an <object> on this element at least options.file must be defined!');
> 	}
378a417,434
>   return _return;
> };
> 
> Vivus.prototype.getTypes = function() {
> 	return ['delayed', 'async', 'oneByOne', 'scenario', 'scenario-sync'];
> };
> Vivus.prototype.setType = function (type) {
>   var allowedTypes = this.getTypes();
>   // Set the animation type
>   if (type && allowedTypes.indexOf(type) === -1) {
>     throw new Error('Vivus [constructor]: ' + type + ' is not an existing animation `type`');
>   }
>   else {
>     this.type = type || allowedTypes[0];
>   }
>   this.map=[];
>   this.mapping();
>   return this;
389c445
<   var allowedTypes = ['delayed', 'async', 'oneByOne', 'scenario', 'scenario-sync'];
---
>   var allowedTypes = this.getTypes();
